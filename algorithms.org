#+TITLE: 競技プログラミングメモ
#+AUTHOR: Torith
#+LANGUAGE: ja
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>
#+OPTIONS: \n:t

* 全般
** 配列の初期化                                                :配列:初期化:
   以下の書式がスマートで良い
   ちなみに、memsetはバイト単位で値設定を行うのでcharの初期化しか基本無理
   無理やりintもできるけど特定の値しか無理なので素直にfill使うべし
   #+BEGIN_SRC c++
   // 配列xを4で初期化
   int x[100];
   fill(x, x + 100, 4);

   // std::vector Xを3で初期化
   std::vector<int> X;
   fill(x.begin(), x.end(), 3);
   #+END_SRC

* 累積和
** いもす法                                                    :配列:累積和:
   重みを持つ複数の区間の重なりを配列を用いて表現した時に全区間の重みの重なりを O(要素の個数) で求めるアルゴリズム
   全体の区間[0, 100]とし、それを配列a[100]で表現するとした時、区間[l, r](0 < l < r < 100) 重みwの区間を配列aに下記のように表現する。
   #+BEGIN_SRC c++
   a[l] += w
   a[r+1] -= w
   #+END_SRC
   一般的な区間[l,r]に同様の操作を行い、全ての要素を追加下後に以下の操作で全区間の重みの重なりを取得する。
   #+BEGIN_SRC c++
	 int sum = 0;
	 int ans[100];                    // 求めたい配列を格納する
	 for (int i = 0; i < 100; i++) {
		 sum += a[i];
		 ans[i] = sum;
	 }
   #+END_SRC
