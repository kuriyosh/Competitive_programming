#+TITLE: 競技プログラミングメモ
#+AUTHOR: Torith
#+LANGUAGE: ja
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>
#+OPTIONS: \n:t
#+OPTIONS: ^:{}

* 全般
** 1次元配列のスマートな初期化                                 :配列:初期化:
   以下の書式がスマートで良い
   ちなみに、memsetはバイト単位で値設定を行うのでcharの初期化しか基本無理
   無理やりintもできるけど特定の値しか無理なので素直にfill使うべし
   #+BEGIN_SRC c++
   // 配列xを4で初期化
   int x[100];
   fill(x, x + 100, 4);

   // std::vector Xを3で初期化
   std::vector<int> X;
   fill(x.begin(), x.end(), 3);
   #+END_SRC
** 二次元vector<pair<int, int>>を初期化                        :配列:初期化:
   pair<int,int>の要素数R*Cの二次元配列pair_vecを(0,0)で初期化
   結構思い出せないので注意
   #+BEGIN_SRC c++
   vector<vector<pair<int,int>>> pair_vec(R, vector<pair<int, int>>(C, make_pair(0,0)));
   #+END_SRC
** 10^{9} + 1の余り                                           :余り:10e9足7:
   ただ、書くだけなので特に解説なし。
   #+BEGIN_SRC c++
   const int md = (int) 1e9 + 7;

	inline void add(int &a, int b){
	    a += b;
	    if (a >= md) a -= md;
	}
	
	inline void sub(int &a, int b){
	    a -= b;
	    if (a < 0) a += md;
	}
	
	inline int mul(int a, int b){
	    return (int) ((ll) a * b % md);
	}
	
	inline int power(int a, long long b){
	    int res = 1;
	    while (b > 0) {
	        if (b & 1) {
	            res = mul(res, a);
	        }
	        a = mul(a, a);
	        b >>= 1;
	    }
	    return res;
	}
	
	inline int dive(int a, int b){
	    return mul(a, power(b, md - 2));
	}
   #+END_SRC
** 逆順ソート                                                  :ソート:逆順:
   標準ライブラリのsortの第3引数に標準ライブラリのgreaterクラスを代入すればOK
   以下は、std::vector<int> Aを降順ソートするコード
   #+BEGIN_SRC c++
   sort(A.begin(), A.end(), greater<int>());
   #+END_SRC
** intの範囲を超えるpow                                       :longlong:pow:
   特に解説なし
   #+BEGIN_SRC c++
	ll power(ll a, ll r) {
	    ll sum = 1;
	    while (r > 0) {
	        if ((r & 1) == 1) {
	            sum *= a;
	        }
	        a *= a;
	        r >>= 1;
	    }
	    return sum;
	}
   #+END_SRC

* 累積和
** いもす法                                                    :配列:累積和:
   重みを持つ複数の区間の重なりを配列を用いて表現した時に全区間の重みの重なりを O(要素の個数) で求めるアルゴリズム
   全体の区間[0, 100]とし、それを配列a[100]で表現するとした時、区間[l, r](0 < l < r < 100) 重みwの区間を配列aに下記のように表現する。
   #+BEGIN_SRC c++
   a[l] += w
   a[r+1] -= w
   #+END_SRC
   一般的な区間[l,r]に同様の操作を行い、全ての要素を追加下後に以下の操作で全区間の重みの重なりを取得する。
   #+BEGIN_SRC c++
	 int sum = 0;
	 int ans[100];                    // 求めたい配列を格納する
	 for (int i = 0; i < 100; i++) {
		 sum += a[i];
		 ans[i] = sum;
	 }
   #+END_SRC
* 探索
** 組み合わせの探索                                        :組み合わせ:列挙:
   組み合わせの候補が入ってる配列をAとする。
   (Aのサイズ)^{2} をfor文でループした時のインデックスをiとする。
   iの内、右からn番目のビットが1の時、A[i]を組み合わせとしてとる。
   上記の操作をfor文の探索空間全て行えば全ての組み合わせを列挙可能。
   #+BEGIN_SRC c++
   for (int i = 0; i < pow(2, A.size); ++i) {
        int base = i;
        int n = 0;
        while(base != 0){
            if(base & 1) {
                // この時、n番目の要素を拾う
            }
            base >>= 1;
            n++;
        }
    }
   #+END_SRC

